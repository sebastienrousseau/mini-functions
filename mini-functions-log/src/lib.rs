//! # Core Log functionality
//!
//! Log provides an easy way to log a message to the console with a simple, readable output format.
//!

// Copyright Â© 2022-2023 Mini Functions. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
// SPDX-License-Identifier: MIT

use std::fmt; // Import the `fmt` module from the standard library.

/// Implements [`Log`] to log a message to the console with a simple, readable output format.
///
/// # Arguments
///
/// * `session_id` - A string slice that holds a session ID. The session ID is a unique identifier for the current session. A random GUID (Globally Unique Identifier) is generated by default.
/// * `time` - A string slice that holds the timestamp in ISO 8601 format.
/// * `level` - A string slice that holds the level (INFO, WARN, ERROR, etc.).
/// * `component` - A string slice that holds the component name.
/// * `description` - A string slice that holds the description of the log message.
///
///

#[non_exhaustive]
#[derive(Default, Debug, Clone, PartialEq, PartialOrd)]
pub struct Log {
    session_id: String,
    time: String,
    level: String,
    component: String,
    description: String,
}

impl Log {
    /// Create a new `Log` instance.
    /// # Arguments
    /// * `session_id` - A string slice that holds a session ID. The session ID is a unique identifier for the current session. A random GUID (Globally Unique Identifier) is generated by default.
    /// * `time` - A string slice that holds the timestamp in ISO 8601 format.
    /// * `level` - A string slice that holds the level (INFO, WARN, ERROR, etc.).
    /// * `component` - A string slice that holds the component name.
    /// * `description` - A string slice that holds the description of the log message.
    ///
    /// # Returns
    /// A new `Log` instance.
    ///
    #[must_use]
    pub fn new(
        session_id: &str,
        time: &str,
        level: &str,
        component: &str,
        description: &str,
    ) -> Self {
        Self {
            session_id: session_id.to_string(),
            time: time.to_string(),
            level: level.to_string(),
            component: component.to_string(),
            description: description.to_string(),
        }
    }
    /// Log a message to the console with a simple, readable output format.
    pub fn log(&self) {
        println!(
            "SessionID={} Timestamp={} Level={} Component={} Description=\"{}\"",
            self.session_id, self.time, self.level, self.component, self.description
        );
    }
}
impl fmt::Display for Log {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(
            f,
            "SessionID={} Timestamp={} Level={} Component={} Description=\"{}\"",
            self.session_id, self.time, self.level, self.component, self.description
        )
    }
}
