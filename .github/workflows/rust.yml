name: ❯ mini_functions_release

on: [push]

env:
  CARGO_TERM_COLOR: always

jobs:
  mini_functions_release:
    strategy:
      fail-fast: false
      matrix:
        node-version: [16]
        target:
          - aarch64-apple-darwin # ARM64 macOS (10.15 Catalina or later)
          - aarch64-unknown-linux-gnu # ARM64 Linux (kernel 4.1, glibc 2.17+)
          - aarch64-unknown-linux-musl # ARM64 Linux (kernel 4.1, musl 1.1.16+)
          - arm-unknown-linux-gnueabihf # ARMv6 Linux (kernel 2.6.32+, glibc 2.15+)
          - arm-unknown-linux-musleabihf # ARMv6 Linux (kernel 2.6.32+, musl 1.1.16+)
          - armv7-unknown-linux-gnueabihf # ARMv7 Linux (kernel 3.2+, glibc 2.15+)
          - armv7-unknown-linux-musleabihf # ARMv7 Linux (kernel 3.2+, musl 1.1.16+)
          - x86_64-apple-darwin # 64-bit macOS (10.7 Lion or later)
          - x86_64-pc-windows-gnu # 64-bit Windows (7 or later)
          - x86_64-unknown-linux-gnu # 64-bit Linux (kernel 2.6.32+, glibc 2.11+)
        include:
          - target: aarch64-apple-darwin # ARM64 macOS (10.15 Catalina or later)
            os: macos-latest
          - target: aarch64-unknown-linux-gnu # ARM64 Linux (kernel 4.1, glibc 2.17+)
            os: ubuntu-latest
          - target: aarch64-unknown-linux-musl # ARM64 Linux (kernel 4.1, musl 1.1.16+)
            os: ubuntu-latest
          - target: arm-unknown-linux-gnueabihf # ARMv6 Linux (kernel 2.6.32+, glibc 2.15+)
            os: ubuntu-latest
          - target: arm-unknown-linux-musleabihf # ARMv6 Linux (kernel 2.6.32+, musl 1.1.16+)
            os: ubuntu-latest
          - target: armv7-unknown-linux-gnueabihf # ARMv7 Linux (kernel 3.2+, glibc 2.15+)
            os: ubuntu-latest
          - target: armv7-unknown-linux-musleabihf # ARMv7 Linux (kernel 3.2+, musl 1.1.16+)
            os: ubuntu-latest
          - target: x86_64-apple-darwin # 64-bit macOS (10.7 Lion or later)
            os: macos-latest
          - target: x86_64-pc-windows-gnu # 64-bit Windows (7 or later)
            os: ubuntu-latest
          - target: x86_64-unknown-linux-gnu # 64-bit Linux (kernel 2.6.32+, glibc 2.11+)
            os: ubuntu-latest

      max-parallel: 2

    runs-on: ${{ matrix.os }}

    env:
      CARGO_TERM_COLOR: always

    steps:
      - name: Checkout repository 🛎️
        id: checkout
        uses: actions/checkout@v3

      - name: Restore dependencies cache 📦
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            ~/.rustup
          key: ${{ runner.os }}-cache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
            ${{ runner.os }}-rustup-

      - name: Install and configure dependencies
        run: |
          # dependencies are only needed on ubuntu as that's the only place where
          # we make cross-compilation
          if [[ $matrix.os == "ubuntu-latest" ]]; then
            sudo apt-get install -qq crossbuild-essential-arm64 crossbuild-essential-armhf
          fi
          # some additional configuration for cross-compilation on linux
          cat >>~/.cargo/config <<EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          [target.aarch64-unknown-linux-musl]
          linker = "aarch64-linux-gnu-gcc"
          [target.armv7-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.armv7-unknown-linux-musleabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.arm-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.arm-unknown-linux-musleabihf]
          linker = "arm-linux-gnueabihf-gcc"
          EOF

      - name: Install Rust 🦀
        id: rust-install
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env

      - name: Run rustfmt 🦀
        id: rustfmt
        run: rustup component add rustfmt

      - name: Check formatting 🦀
        id: fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check --verbose --color=always

      - name: Set environment variables 🔢
        run: |
          echo "VERSION=0.0.8" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=mini-functions-${{ matrix.target }}" >> $GITHUB_ENV
          # echo "COMMITS=$(git log -20 --oneline | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" | awk '{labels="";for(i=2;i<=NF;i++){if($i~/^[a-zA-Z]+\([a-zA-Z0-9-_]+\):/)labels=labels" "$i;else break;}printf("-%s %s\n",labels,$0);}' | sort -k1,1)" >> $GITHUB_ENV

      - name: Build libraries 🏗
        id: build
        run: |
          # Check the code base
          cargo check --all

          # Install cross
          cargo install cross

          # Clean the build artifacts
          cargo clean

          # Build the libraries for the target platform and architecture
          cross build --release --target=${{ matrix.target }} --lib
        shell: /bin/bash -e {0}

      - name: Package the binary 📦
        id: package
        run: |
          mkdir -p target/package
          tar czf target/package/${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release .

      - name: Deploy 🚀
        id: deploy
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}.tar.gz
          path: target/package/${{ matrix.target }}.tar.gz

      - name: Generate Changelog 📜
        id: changelog
        if: github.ref == 'refs/heads/main'
        run: |
          # Generate the release notes template
          echo "<img src='https://raw.githubusercontent.com/sebastienrousseau/vault/main/assets/shields/made-with-love.svg' alt='Made with Love' width='100%'/><br>" > ${{ github.workspace }}-CHANGELOG.md
          echo "<h1>Highly performant utility and wrapper functions library for Rust 🚀</h1><br>" > ${{ github.workspace }}-CHANGELOG.md
          echo "<img src='https://raw.githubusercontent.com/sebastienrousseau/vault/main/assets/banners/banner-mini-functions.svg' alt='Mini Functions Banner' width='100%'/><br>" > ${{ github.workspace }}-CHANGELOG.md
          echo "<h2>Welcome to Mini Functions 👋</h2><br>" >> ${{ github.workspace }}-CHANGELOG.md
          echo "Mini Functions is a highly performant utility and wrapper functions library for Rust that has been carefully designed with optimization and efficiency in mind.<br>" >> ${{ github.workspace }}-CHANGELOG.md
          echo "" >> ${{ github.workspace }}-CHANGELOG.md
          echo "By providing convenient wrapper functions, our library aims to provide a high-level interface for common tasks while still leveraging the performance benefits of Rust under the hood.<br>" >> ${{ github.workspace }}-CHANGELOG.md
          echo "" >> ${{ github.workspace }}-CHANGELOG.md
          echo "These utility functions serve as an essential toolkit for any Rust developer, and the library's design abstractions allow for easy integration into a variety of projects and applications." >> ${{ github.workspace }}-CHANGELOG.md
          echo "" >> ${{ github.workspace }}-CHANGELOG.md
          echo "<h2>Key Features 🎯</h2><br>" >> ${{ github.workspace }}-CHANGELOG.md
          # echo "$COMMITS" >> ${{ github.workspace }}-CHANGELOG.md
          echo "$cargo changelog > ${{ github.workspace }}-CHANGELOG.md"
          echo "..." >> ${{ github.workspace }}-CHANGELOG.md
          echo "" >> ${{ github.workspace }}-CHANGELOG.md

      - name: Create Release 🚀
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: CHANGELOG.md
          draft: true
          prerelease: false
