name: ❯ mini_functions_release

on: [push]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  CLIPPY_DISABLE_DOCS_LINKS: 1

jobs:
  rustfmt:
    name: rustfmt 🦀
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        id: checkout_repository_rustfmt
        uses: actions/checkout@v3
        with: { submodules: true }
      - name: Install rust
        id: install_rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          components: rustfmt
      - name: Check formatting
        id: check_formatting
        run: cargo fmt -- --check

  documentation:
    name: documentation 📚
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        id: checkout_repository_documentation
        uses: actions/checkout@v3
        with: { submodules: true }
      - name: Install rust
        id: install_rust_documentation
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
      - name: Documentation
        id: documentation
        run: cargo doc --all-features --workspace

  clippy:
    name: clippy 🦀
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-features -- -D warnings

  mini_functions_release:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

      max-parallel: 2

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository 🛎️
        id: checkout
        uses: actions/checkout@v3
        with: { submodules: true }

      - name: Install Rust aarch64-apple-darwin
        if: matrix.platform == 'macos-latest'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: aarch64-apple-darwin

      - name: Install Rust x86_64-apple-darwin
        if: matrix.platform == 'macos-latest'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: x86_64-apple-darwin

      - name: Install Rust Linux x86_64-unknown-linux-gnu
        if: matrix.platform == 'ubuntu-latest'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: x86_64-unknown-linux-gnu

      - name: Install Rust Windows x86_64-pc-windows-msvc
        if: matrix.platform == 'windows-latest'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: x86_64-pc-windows-msvc

      - name: Restore dependencies cache 📦
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            ~/.rustup
          key: ${{ runner.os }}-cache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
            ${{ runner.os }}-rustup-

      - name: Install Rust 🦀
        id: rust-install
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true

      - name: Set environment variables 🔢
        run: |
          echo "VERSION=0.0.8" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=mini-functions-${{ matrix.platform }}" >> $GITHUB_ENV
          # echo "COMMITS=$(git log -20 --oneline | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" | awk '{labels="";for(i=2;i<=NF;i++){if($i~/^[a-zA-Z]+\([a-zA-Z0-9-_]+\):/)labels=labels" "$i;else break;}printf("-%s %s\n",labels,$0);}' | sort -k1,1)" >> $GITHUB_ENV

      - name: Build libraries 🏗
        id: build
        run: |
          # Check the code base
          cargo check --all

          # Install cross
          cargo install cross

          # Clean the build artifacts
          cargo clean

          # Build the libraries for the target platform and architecture
          cargo build --verbose --workspace --target=${{ matrix.platform }} --lib
        shell: /bin/bash -e {0}

      - name: Package the binary 📦
        id: package
        run: |
          mkdir -p target/package
          tar czf target/package/${{ matrix.platform }}.tar.gz -C target/${{ matrix.platform }}/release .

      - name: Deploy 🚀
        id: deploy
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.platform }}.tar.gz
          path: target/package/${{ matrix.platform }}.tar.gz

      - name: Generate Changelog 📜
        id: changelog
        if: github.ref == 'refs/heads/main'
        run: |
          # Generate the release notes template
          echo "<img src='https://raw.githubusercontent.com/sebastienrousseau/vault/main/assets/shields/made-with-love.svg' alt='Made with Love' width='100%'/><br>" > ${{ github.workspace }}-CHANGELOG.md
          echo "<h1>Highly performant utility and wrapper functions library for Rust 🚀</h1><br>" > ${{ github.workspace }}-CHANGELOG.md
          echo "<img src='https://raw.githubusercontent.com/sebastienrousseau/vault/main/assets/banners/banner-mini-functions.svg' alt='Mini Functions Banner' width='100%'/><br>" > ${{ github.workspace }}-CHANGELOG.md
          echo "<h2>Welcome to Mini Functions 👋</h2><br>" >> ${{ github.workspace }}-CHANGELOG.md
          echo "Mini Functions is a highly performant utility and wrapper functions library for Rust that has been carefully designed with optimization and efficiency in mind.<br>" >> ${{ github.workspace }}-CHANGELOG.md
          echo "" >> ${{ github.workspace }}-CHANGELOG.md
          echo "By providing convenient wrapper functions, our library aims to provide a high-level interface for common tasks while still leveraging the performance benefits of Rust under the hood.<br>" >> ${{ github.workspace }}-CHANGELOG.md
          echo "" >> ${{ github.workspace }}-CHANGELOG.md
          echo "These utility functions serve as an essential toolkit for any Rust developer, and the library's design abstractions allow for easy integration into a variety of projects and applications." >> ${{ github.workspace }}-CHANGELOG.md
          echo "" >> ${{ github.workspace }}-CHANGELOG.md
          echo "<h2>Key Features 🎯</h2><br>" >> ${{ github.workspace }}-CHANGELOG.md
          # echo "$COMMITS" >> ${{ github.workspace }}-CHANGELOG.md
          echo "$cargo changelog > ${{ github.workspace }}-CHANGELOG.md"
          echo "..." >> ${{ github.workspace }}-CHANGELOG.md
          echo "" >> ${{ github.workspace }}-CHANGELOG.md

      - name: Create Release 🚀
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: CHANGELOG.md
          draft: true
          prerelease: false
