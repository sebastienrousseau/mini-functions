name: ❯ mini_functions_release

on: [push]

env:
  # For some builds, we use cross to test on 32-bit and big-endian
  # systems.
  CARGO: cargo
  # When CARGO is set to CROSS, this is set to `--target matrix.target`.
  TARGET_FLAGS: ""
  # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
  TARGET_DIR: ./target
  # Emit backtraces on panics.
  RUST_BACKTRACE: 1
  # Enable colored output.
  CARGO_TERM_COLOR: always

jobs:
  mini_functions_release:
    name: mini_functions_release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        node-version: [16]
        target:
          - x86_64-unknown-linux-gnu # 64-bit Linux (kernel 2.6.32+, glibc 2.11+)
          # - x86_64-pc-windows-gnu # 64-bit Windows (7 or later)
          - x86_64-apple-darwin # 64-bit macOS (10.7 Lion or later)
          # - aarch64-unknown-linux-gnu # ARM64 Linux (kernel 4.1, glibc 2.17+)
          # - aarch64-apple-darwin # ARM64 macOS (10.15 Catalina or later)
        include:
          - target: x86_64-unknown-linux-gnu # 64-bit Linux (kernel 2.6.32+, glibc 2.11+)
            os: ubuntu-latest
          # - target: x86_64-pc-windows-gnu # 64-bit Windows (7 or later)
          #   os: ubuntu-latest
          - target: x86_64-apple-darwin # 64-bit macOS (10.7 Lion or later)
            os: macos-latest
          # - target: aarch64-unknown-linux-gnu # ARM64 Linux (kernel 4.1, glibc 2.17+)
          # os: ubuntu-latest
          # - target: aarch64-apple-darwin # ARM64 macOS (10.15 Catalina or later)
          # os: macos-latest

      max-parallel: 2

    steps:
      - name: Checkout repository 🛎️
        id: checkout
        uses: actions/checkout@v3
        with: { submodules: true }

      - name: Restore dependencies cache 📦
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            ~/.rustup
          key: ${{ runner.os }}-cache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
            ${{ runner.os }}-rustup-

      - name: Install Rust 🦀
        id: rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

      - name: Install rustfmt 🦀
        id: install-rustfmt
        uses: actions-rs/toolchain@v1
        with:
          components: rustfmt
          override: true
          profile: minimal
          target: ${{ matrix.target }}
          toolchain: stable

      - name: Use Cross
        shell: bash
        run: |
          cargo install cross
          echo "CARGO=cross" >> $GITHUB_ENV
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show command used for Cargo
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"

      - name: Run rustfmt, clippy and tests 🦀
        run: |
          # Run rustfmt
          cargo fmt --all -- --check

          # Run clippy
          cargo clippy --all-targets --all-features --workspace -- -D warnings

          # Run tests
            cargo test --all-targets --workspace --all-features

          # Run cargo audit
          cargo audit

          # Run cargo documentation
          cargo doc --all-features --workspace

      - name: Set environment variables 🔢
        run: |
          echo "VERSION=0.0.8" >> $GITHUB_ENV

      - name: Build libraries 🏗
        id: build
        run: |
          # Check the code base
          cargo check --all --all-features --workspace --verbose
          # Install cross
          cargo install cross
          # Clean the build artifacts
          cargo clean --verbose
          # Build the libraries for the target platform and architecture
          # cargo build --verbose --workspace --release --target ${{ matrix.target }}
          ${{ env.CARGO }} build --lib --verbose --workspace --release ${{ env.TARGET_FLAGS }}

        shell: /bin/bash -e {0}

      - name: Package the binary 📦
        id: package
        run: |
          staging="mini-functions-v${{ needs.create-release.outputs.mini_functions_version }}-${{ matrix.target }}"
          mkdir -p "$staging"/{complete,doc}

          cp "target/${{ matrix.target }}/release/mini-functions" "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV

      # - name: Deploy 🚀
      #   id: deploy
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: ${{ matrix.platform }}.tar.gz
      #     path: target/package/${{ matrix.platform }}.tar.gz

      - name: Generate Changelog 📜
        id: changelog
        # if: github.ref == 'refs/heads/main'
        run: |
          # Copy content of template file to CHANGELOG.md
          cat TEMPLATE.md > ${{ github.workspace }}/CHANGELOG.md
          # Append git log to CHANGELOG.md
          echo "$(git log --pretty=format:'%s' --reverse $(git describe --tags --abbrev=0)..HEAD)" >> ${{ github.workspace }}/CHANGELOG.md
          # Append empty line to CHANGELOG.md
          echo "" >> ${{ github.workspace }}/CHANGELOG.md
          # Append version information to CHANGELOG.md
          echo "## [${{ env.VERSION }}] - $(date +'%Y-%m-%d')" >> ${{ github.workspace }}/CHANGELOG.md

      - name: Get the release version from the tag
        shell: bash
        if: env.CARGO_MINI_FUNCTIONS_VERSION == ''
        run: |
          # Apparently, this is the right way to get a tag name. Really?
          #
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "CARGO_MINI_FUNCTIONS_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "version is: ${{ env.CARGO_MINI_FUNCTIONS_VERSION }}"

      - name: Create Release 🚀
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} (v${{ env.CARGO_MINI_FUNCTIONS_VERSION }})
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          tag_name: v${{ env.VERSION }}
          release_name: Mini Functions 🦀 v${{ env.VERSION }}
          body_path: ${{ github.workspace }}/CHANGELOG.md
          draft: true
          prerelease: false
