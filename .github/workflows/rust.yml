name: ❯ mini_functions_release

on: [push]

env:
  CARGO_TERM_COLOR: always

jobs:
  targets:
    name: build_release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        node-version: [16]
        target:
          - x86_64-unknown-linux-gnu # 64-bit Linux (kernel 2.6.32+, glibc 2.11+)
          - x86_64-pc-windows-gnu # 64-bit Windows (7 or later)
          - x86_64-apple-darwin # 64-bit macOS (10.7 Lion or later)
          - aarch64-unknown-linux-gnu # ARM64 Linux (kernel 4.1, glibc 2.17+)
          # - aarch64-apple-darwin # ARM64 macOS (10.15 Catalina or later)
        include:
          - target: x86_64-unknown-linux-gnu # 64-bit Linux (kernel 2.6.32+, glibc 2.11+)
            os: ubuntu-latest
          - target: x86_64-pc-windows-gnu # 64-bit Windows (7 or later)
            os: ubuntu-latest
          - target: x86_64-apple-darwin # 64-bit macOS (10.7 Lion or later)
            os: macos-latest
          - target: aarch64-unknown-linux-gnu # ARM64 Linux (kernel 4.1, glibc 2.17+)
            os: ubuntu-latest
          # - target: aarch64-apple-darwin # ARM64 macOS (10.15 Catalina or later)
          # os: macos-latest

      max-parallel: 2

    steps:
      - name: Checkout repository 🛎️
        id: checkout
        uses: actions/checkout@v3
        with: { submodules: true }

      - name: Restore dependencies cache 💰
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            ~/.cargo-make
            ~/.rustup
          key: ${{ runner.os }}-cache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
            ${{ runner.os }}-cargo-make-
            ${{ runner.os }}-rustup-

      # install:
      #   name: install
      #   runs-on: ${{ matrix.os }}
      #   needs: [targets]
      #   steps:
      - name: Installing Rust 🦀
        id: rust-installation
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

      # - name: Installing rustfmt and cargo-watch 🦀
      #   id: rustfmt-installation
      #   uses: actions-rs/toolchain@v1
      #   with:
      #     components: rustfmt, cargo-watch, clippy
      #     override: true
      #     profile: minimal
      #     target: ${{ matrix.target }}
      #     toolchain: stable

      - name: Save Rust tools cache 📦
        id: save-rust-tools-cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            ~/.cargo-make
            ~/.rustup
          key: ${{ runner.os }}-rust-tools-cache-${{ hashFiles('**/Cargo.lock') }}

      - name: Update version number in codebase 📝
        run: |
          NEW_VERSION=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Set environment variables 🔢
        run: |
          echo "VERSION=0.0.8" >> $GITHUB_ENV
      - name: Build libraries 🏗
        id: build
        run: |
          # Install cross
          cargo install cross

          # Clean the build artifacts
          cargo clean --verbose

          # Build the libraries for the target platform and architecture
          cargo build --verbose --workspace --release --target ${{ matrix.target }}
        shell: /bin/bash -e {0}

      # run:
      #   name: run
      #   runs-on: ${{ matrix.os }}
      #   needs: [targets, install]
      #   steps:
      - name: Run Cargo Format 🦀
        id: run-check-format
        run: |
          cargo check --all --all-features --workspace --verbose

      - name: Run Clippy 🦀
        id: run-check-clippy
        run: |
          cargo clippy --all-targets --all-features --workspace -- -D warnings

      - name: Run Cargo Doc 🦀
        id: run-check-doc
        run: |
          cargo doc --all-features --workspace

      - name: Run Cargo Test 🦀
        id: run-check-test
        run: |
          cargo test --all-targets --workspace --all-features

      # - name: Run Cargo Audit 🦀
      #   id: run-check-audit
      #   run: |
      #     cargo audit

      # env:
      #   name: environment
      #   runs-on: ${{ matrix.os }}
      #   needs: [targets, install, run]
      #   steps:

      # build:
      #   name: build
      #   runs-on: ${{ matrix.os }}
      #   needs: [targets, install, run, env]
      #   steps:
      # - name: Build libraries 🏗
      #   run: |
      #     cargo make build
      #   shell: /bin/bash -e {0}

      # release:
      #   name: release
      #   runs-on: ${{ matrix.os }}
      #   needs: [targets, install, run, env, build]
      # steps:
      - name: Package the binary 📦
        id: package
        run: |
          mkdir -p target/package
          tar czf target/package/${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release .

      - name: Deploy 🚀
        id: deploy
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}.tar.gz
          path: target/package/${{ matrix.target }}.tar.gz

      - name: Generate Changelog 📜
        id: changelog
        # if: github.ref == 'refs/heads/main'
        run: |
          # Copy content of template file to CHANGELOG.md
          cat TEMPLATE.md > ${{ github.workspace }}/CHANGELOG.md
          # Append git log to CHANGELOG.md
          echo "$(git log --pretty=format:'%s' --reverse $(git describe --tags --abbrev=0)..HEAD)" >> ${{ github.workspace }}/CHANGELOG.md
          # Append empty line to CHANGELOG.md
          echo "" >> ${{ github.workspace }}/CHANGELOG.md
          # Append version information to CHANGELOG.md
          echo "## [${{ env.VERSION }}] - $(date +'%Y-%m-%d')" >> ${{ github.workspace }}/CHANGELOG.md

      - name: Create Release 🚀
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Mini Functions 🦀 v${{ env.VERSION }}
          body_path: ${{ github.workspace }}/CHANGELOG.md
          draft: true
          prerelease: false
