name: ❯ mini_functions_release

on: [push]

env:
  CARGO_TERM_COLOR: always

jobs:
  mini_functions_release:
    name: mini_functions_release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        node-version: [16]
        # setup different OS and targets
        include:
          - name: ubuntu_18_04-x86_64
            os: ubuntu-18.04
            TARGET_CPU: x86-64

          - name: ubuntu_22_04-x86_64
            os: ubuntu-22.04
            TARGET_CPU: x86-64

          # - name: osx_11_0-x86_64
          #   os: macos-11.0
          #   TARGET_CPU: x86-64

          - name: osx_10_11-x86_64
            os: macos-10.15
            TARGET_CPU: nehalem

          - name: win-x86_64
            os: windows-2019
            TARGET_CPU: x86-64

          - name: ubuntu_18_04-x86_64-haswell
            os: ubuntu-18.04
            TARGET_CPU: haswell

          - name: win-x86_64-haswell
            os: windows-2019
            TARGET_CPU: haswell

      max-parallel: 2

    steps:
      - name: Checkout repository 🛎️
        id: checkout
        uses: actions/checkout@v3
        with: { submodules: true }

      - name: Install GNU tar (Macos)
        if: ${{contains( matrix.os, 'macos' )}}
        run: |
          brew install gnu-tar
          echo PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH" >> $GITHUB_ENV

      - name: Restore dependencies cache 📦
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            ~/.rustup
          key: ${{ runner.os }}-cache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
            ${{ runner.os }}-rustup-

      - name: Install nasm 🦀
        run: brew install nasm
        if: ${{contains( matrix.os, 'macos' )}}

      - name: Install nasm
        run: choco install nasm
        if: ${{contains( matrix.os, 'windows' )}}

      - name: Install nasm
        run: |
          curl -L -o nasminst.exe https://imageflow-resources.s3-us-west-2.amazonaws.com/tools/nasm-2.15.05-installer-x64.exe
          .\nasminst.exe /S
        if: ${{contains( matrix.os, 'windows' ) && failure()}}

      - name: Set Path
        run: |
          echo "C:\Program Files\NASM" >> $GITHUB_PATH
          echo "C:\Program Files (x86)\NASM" >> $GITHUB_PATH
        if: ${{contains( matrix.os, 'windows' )}}
        shell: bash

      - name: Install nasm
        run: sudo apt install nasm
        if: ${{contains( matrix.os, 'ubuntu' )}}

      - name: Install Rust 🦀
        id: rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

      - name: Install rustfmt 🦀
        id: install-rustfmt
        uses: actions-rs/toolchain@v1
        with:
          components: rustfmt
          override: true
          profile: minimal
          target: ${{ matrix.target }}
          toolchain: stable

      - name: Run rustfmt 🦀
        id: rustfmt
        run: rustup component add rustfmt

      - name: Check formatting 🦀
        id: fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check --verbose --color=always

      - name: Documentation 📚
        id: documentation
        run: cargo doc --all-features --workspace

      - name: Clippy 🦀
        id: clippy
        run: cargo clippy --all-features -- -D warnings

      - name: Set environment variables 🔢
        run: |
          echo "VERSION=0.0.8" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=mini-functions-${{ matrix.target }}" >> $GITHUB_ENV

      - name: Build libraries 🏗
        id: build
        run: |
          # Check the code base
          cargo check --all --all-features --workspace --verbose

      - name: Test Build 🧪
        run: cargo test --all
        env:
          RUSTFLAGS: -C target-cpu=${{matrix.TARGET_CPU}}

      - run: cargo build --all --all-targets --release --verbose
        shell: bash
        env:
          RUSTFLAGS: -C target-cpu=${{matrix.TARGET_CPU}}

          # Install cross
          # cargo install cross

          # Clean the build artifacts
          # cargo clean --verbose

          # Build the libraries for the target platform and architecture
          # cargo build --verbose --workspace --release --target ${{ matrix.target }}  --lib
        # shell: /bin/bash -e {0}

      - name: Package the binary 📦
        id: package
        run: |
          mkdir -p target/package
          tar czf target/package/${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release .

      - name: Deploy 🚀
        id: deploy
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform }}.tar.gz
          path: target/package/${{ matrix.platform }}.tar.gz

      - name: Generate Changelog 📜
        id: changelog
        # if: github.ref == 'refs/heads/main'
        run: |
          # Generate the release notes template
          echo "<img src='https://raw.githubusercontent.com/sebastienrousseau/vault/main/assets/shields/made-with-love.svg' alt='Made with Love' width='100%'/><br>" > ${{ github.workspace }}-CHANGELOG.md
          echo "<h1>Highly performant utility and wrapper functions library for Rust 🚀</h1><br>" > ${{ github.workspace }}-CHANGELOG.md
          echo "<img src='https://raw.githubusercontent.com/sebastienrousseau/vault/main/assets/banners/banner-mini-functions.svg' alt='Mini Functions Banner' width='100%'/><br>" > ${{ github.workspace }}-CHANGELOG.md
          echo "<h2>Welcome to Mini Functions 👋</h2><br>" >> ${{ github.workspace }}-CHANGELOG.md
          echo "Mini Functions is a highly performant utility and wrapper functions library for Rust that has been carefully designed with optimization and efficiency in mind.<br>" >> ${{ github.workspace }}-CHANGELOG.md
          echo "" >> ${{ github.workspace }}-CHANGELOG.md
          echo "By providing convenient wrapper functions, our library aims to provide a high-level interface for common tasks while still leveraging the performance benefits of Rust under the hood.<br>" >> ${{ github.workspace }}-CHANGELOG.md
          echo "" >> ${{ github.workspace }}-CHANGELOG.md
          echo "These utility functions serve as an essential toolkit for any Rust developer, and the library's design abstractions allow for easy integration into a variety of projects and applications." >> ${{ github.workspace }}-CHANGELOG.md
          echo "" >> ${{ github.workspace }}-CHANGELOG.md
          echo "<h2>Key Features 🎯</h2><br>" >> ${{ github.workspace }}-CHANGELOG.md
          # echo "$COMMITS" >> ${{ github.workspace }}-CHANGELOG.md
          echo "$cargo changelog > ${{ github.workspace }}-CHANGELOG.md"
          echo "" >> ${{ github.workspace }}-CHANGELOG.md
          echo "" >> ${{ github.workspace }}-CHANGELOG.md

      - name: Create Release 🚀
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Mini Functions 🦀 v${{ env.VERSION }}
          body_path: ${{ github.workspace }}-CHANGELOG.md
          draft: true
          prerelease: false
